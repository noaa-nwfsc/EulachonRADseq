---
title: "VCF Visuals and Preliminary Analysis"
author: Mia Nahom
date: 2025-03-13
format: 
  html:
      df-print: paged
      embed-resources: true
editor: visual
---

```{r}
#| output: false
library(ggplot2)
library(tidyverse)
library(SeqArray)
library(dplyr)
library(SNPRelate)
library(ggrepel)
library(wesanderson)
library(RColorBrewer)
```

## Preliminary Analysis

### Read in files

```{r}
freq <- read.table("~/Desktop/Eulachon/v1/out.frq",header=TRUE,row.names = NULL) %>%mutate(AlleleFreq=paste(.[,5], .[,6])) 
  colnames(freq)[1:4] <- colnames(freq)[2:5]
  freq <- freq[,-c(5,6)]
  
countfreq <- read.table("~/Desktop/Eulachon/v1/out.frq.count",header=TRUE, row.names = NULL) %>%mutate(AlleleFreq=paste(.[,5], .[,6])) 
  colnames(countfreq)[1:4] <- colnames(countfreq)[2:5]
  countfreq <- countfreq[,-c(5,6)]
individualdepth <- read.table("~/Desktop/Eulachon/v1/out.idepth",header=TRUE, row.names = NULL)
individualmissing <- read.table("~/Desktop/Eulachon/v1/out.imiss",header=TRUE, row.names = NULL) 
sitedepth <- read.table("~/Desktop/Eulachon/v1/out.ldepth",header=TRUE, row.names = NULL) 
sitemeandepth <- read.table("~/Desktop/Eulachon/v1/out.ldepth.mean",header=TRUE, row.names = NULL)
missingsite <- read.table("~/Desktop/Eulachon/v1/out.lmiss",header=TRUE, row.names = NULL)
sitequal <- read.table("~/Desktop/Eulachon/v1/out.lqual",header=TRUE, row.names = NULL)
```

### Look at tables
```{r}
freq
```

```{r}
countfreq
```

```{r}
individualdepth
```

```{r}
individualmissing
```

```{r}
sitedepth
```

```{r}
sitemeandepth
```

```{r}
missingsite
```

```{r}
sitequal
```

### Site depth by position

```{r}
ggplot(sitedepth, aes(x=POS,y=SUM_DEPTH)) +
  geom_point(size=0.2) 
```

### Missingnes by individuals

```{r}
ggplot(individualmissing, aes(x=F_MISS)) + geom_histogram(binwidth=0.01,color="black", fill="skyblue1")
indmissing_2 <- individualmissing
indmissing_2[c('individual', 'location')] <- str_split_fixed(indmissing_2$INDV, '_', 2)
ggplot(indmissing_2, aes(x=F_MISS,fill=location)) + geom_histogram(binwidth=0.01,color="black")
```

### Individual depth

```{r}
ggplot(individualdepth, aes(x=MEAN_DEPTH)) + geom_histogram(binwidth=5,color="black", fill="skyblue1")
inddepth_2 <- individualdepth
inddepth_2[c('individual', 'location')] <- str_split_fixed(inddepth_2$INDV, '_', 2)
ggplot(inddepth_2, aes(fill=location,x=MEAN_DEPTH)) + geom_histogram(binwidth=5,color="black")
ggplot(inddepth_2, aes(fill=location,x=N_SITES)) + geom_histogram(binwidth=10000,color="black")
```

### Missingness by site

```{r}
ggplot(missingsite, aes(x=F_MISS)) + geom_histogram(binwidth=0.05,color="black", fill="skyblue1")
```

Create a quick meta data:

```{r}
meta <- indmissing_2[c(1,6,7)]
colnames(meta)[3] <-"location_kit"
meta[c('location', 'kit')] <- str_split_fixed(meta$location_kit, '_', 2)
meta <- meta %>% mutate_all(na_if,"")
meta
barcodes <- read.csv("Barcodes.csv")
barcodes_unique <- barcodes[!duplicated(barcodes$Individual), ]
meta_bar <- merge(meta,barcodes_unique,by.x="INDV",by.y="Individual",all.x=TRUE)
```

## Filtering analysis - following this tutorial:

https://marineomics.github.io/RADseq.html#Evaluate_potential_sources_of_error

```{r}
filename = "populations.snps" 
filename.gds = paste0("~/Desktop/Eulachon/populations/", paste0(filename, ".gds"))
#filename.vcf = paste0("~/Desktop/Eulachon/populations/", paste0(filename, ".vcf"))
#seqVCF2GDS(vcf.fn = filename.vcf, out.fn = filename.gds, storage.option="ZIP_RA")
```

```{r}
gdsin = SeqArray::seqOpen(filename.gds)
print(paste0("The number of SAMPLES in data: ", length(c(seqGetData(gdsin, "sample.id")))))
```

```{r}
print(paste0("The number of SNPs in data: ",  length(c(seqGetData(gdsin, "variant.id")))))
```

```{r}
print("Per variant: ")
summary(m1 <- seqMissing(gdsin, per.variant=TRUE))
```

```{r}
print("Per sample: ")
summary(m2 <- seqMissing(gdsin, per.variant=FALSE))
```

```{r}
samples <- seqGetData(gdsin, "sample.id")
sampleframe <- cbind(samples,m2)[order(-m2),] %>% as.data.frame()
sampleframe
```

### Filtering and PCA 
First filter our samples with a missingness >0.5 and then filter out the individuals that are duplicated between old and new
```{r}
sample.ids = seqGetData(gdsin, "sample.id")
bad_samples = sampleframe[sampleframe$m2 > 0.5, "samples"]
keep = sample.ids[which(!sample.ids %in% bad_samples)]
#keep <- keep[!grepl("old", keep)]
```
## LD pruning 
```{r}
#| output: false
snpset <- SNPRelate::snpgdsLDpruning(gdsin, ld.threshold=0.4, autosome.only = F, start.pos="random", remove.monosnp = T, sample.id = keep)  
```
```{r}
names(snpset)
```
```{r}
snpset.id <- unlist(unname(snpset))
```


```{r}
# PCA only on SNPs with a minor allele freq greater than 5%
pca.out = snpgdsPCA(autosome.only = F, 
                    gdsin, num.thread=2, 
                    remove.monosnp = T, 
                    maf = 0.05,
                    missing.rate= 0.5,
                    snp.id=snpset.id,
                    sample.id = keep) # filtering for pruned SNPs
```

```{r}
eig = pca.out$eigenval[!is.na(pca.out$eigenval)]
barplot(100*eig/sum(eig), main="PCA Eigenvalues")
```

```{r}
#meta_keep <- meta[meta$INDV %in% keep,]
#meta_keep <- meta_keep[order(match(meta_keep$INDV, keep)), ]
#all(keep==meta_keep$INDV)

meta_barkeep <- meta_bar[meta_bar$INDV %in% keep,]
meta_barkeep <- meta_barkeep[order(match(meta_barkeep$INDV, keep)), ]
all(keep==meta_barkeep$INDV)
```
```{r}
# make a data.frame
tab <- data.frame(sample.id = pca.out$sample.id,
    EV1 = pca.out$eigenvect[,1],    # the first eigenvector
    EV2 = pca.out$eigenvect[,2],    # the second eigenvector
    stringsAsFactors = FALSE)
tab
```
```{r}
plot(tab$EV2, tab$EV1, xlab="eigenvector 2", ylab="eigenvector 1")
```

```{r}
#pal <- wes_palette("AsteroidCity2", 6, type = "discrete")
pal <- c('#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#e7298a','#fdbf6f')
print(
  as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., Plate =  meta_barkeep$Plate) %>%
      ggplot(., aes(x=V1, y=V2, color = Plate)) + 
      geom_point(size=2) +
      stat_ellipse(level = 0.95, size = 1) +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 0) +
      theme_bw() +
      xlab(paste0("PC1 [",paste0(round(eig[1], 2)), "%]")) +
      ylab(paste0("PC2 [",paste0(round(eig[2], 2)), "%]")) +
      ggtitle("PCA Colored by Plate (excluding old NEB)") +
      scale_color_manual(values=pal)
)
pal <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a')
print(
  as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., Loc =  meta_barkeep$location) %>%
      ggplot(., aes(x=V1, y=V2, color = Loc)) + 
      geom_point(size=2) +
      stat_ellipse(level = 0.95, size = 1) +
      geom_hline(yintercept = 0) +
      geom_vline(xintercept = 0) +
      theme_bw() +
      xlab(paste0("PC1 [",paste0(round(eig[1], 2)), "%]")) +
      ylab(paste0("PC2 [",paste0(round(eig[2], 2)), "%]")) +
      ggtitle("PCA Colored by Location") +
      scale_color_manual(values=pal)
)
```


```{r}
as.data.frame(pca.out$eigenvect) %>%
      tibble::add_column(., ID =  meta_barkeep$INDV) %>%
      select(ID, everything()) 
```

```{r}
SnpLoad <- snpgdsPCASNPLoading(pca.out, gdsin)
```

```{r}
names(SnpLoad)
```

```{r}
dim(SnpLoad$snploading)
```
```{r}
seqClose(gdsin)
```

